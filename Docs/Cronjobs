# CRONJOBS — זיהוי, סיכונים והמלצות

> **הערה אתית:** דף זה מיועד לשימוש לימודי, מעבדה ואודיטים מורשים בלבד. אין להשתמש בהוראות או בדוגמאות כנגד מערכות ללא אישור מפורש.

---

## מה זה Cron?

Cron היא מערכת בתשתית יוניקס/לינוקס להרצת משימות מתוזמנות (jobs) בזמנים קבועים. משימות אלו יכולות להיות סקריפטים או בינאריים והן מתבצעות בהרשאות בעל המעל (owner) של ה‑crontab או הקובץ שמריץ אותן (במקרים מערכתיים זה לעתים root).

בזכות זה, משימה מתוזמנת שמורצת כ־root יכולה להוות וקטור להגבהת הרשאות אם מתקיימים תנאים מתאימים.

---

## איפה מחפשים Cron jobs?

* קובץ מערכת עיקרי:

  ```bash
  cat /etc/crontab
  ```
* ספריות מערכתיות להרצות משימות:

  ```bash
  ls -la /etc/cron.d /etc/cron.daily /etc/cron.hourly /etc/cron.weekly /etc/cron.monthly
  ```
* קרונט של משתמש ספציפי (למשל root):

  ```bash
  sudo crontab -l -u root
  ```
* קרונט של המשתמש הנוכחי:

  ```bash
  crontab -l
  ```

**הערה:** כל משתמש יכול להחזיק crontab משלו; משימות מערכתיות שנמצאות תחת `/etc/` נוטות להרוץ כ־root.

---

## רעיונות לזיהוי סכנות (מה לבדוק)

1. **האם ה‑cron מריץ סקריפט/בינארי שניתן לכתוב אליו?**

   * אם יש לנו אפשרות לשנות את הסקריפט שה‑cron יריץ (או לתקוע אליו לינק/קובץ), אז הקוד שלנו ירוץ בהרשאות של הבעלים (לרוב root).
   * חפש קבצים/תיקיות עם הרשאת כתיבה שנמצאים במסלולי קריאה של crons.

2. **האם ה‑cron מריץ פקודות עם נתיבים יחסיים או משתני PATH לא בטוחים?**

   * אם ה‑cron מריץ פקודה ללא נתיב מוחלט ו‑PATH בסביבת הריצה מאפשר גישה לנתיבים ציבוריים — יתכן PATH hijack.

3. **האם ה‑cron מוריץ פקודות שמריצות כל תוכן בספריה ספציפית (למשל `for f in /tmp/*; do ...`)?**

   * חפש דפוסים כמו הרצת כל קבצים ב־directory; אם ניתן לכתוב אליה — זה וקטור להצבה.

---

## פקודות שימושיות לאיתור נקודות תורפה

* הצגת crontab מערכתית:

  ```bash
  cat /etc/crontab
  cat /etc/cron.d/* 2>/dev/null
  ```
* להציג קרונטים של root:

  ```bash
  sudo crontab -l -u root
  ```
* חפש סקריפטים שמופעלים על‑ידי cron ובדוק אם הם ניתנים לכתיבה:

  ```bash
  # חפש קבצים המוזכרים תחת /etc/cron* (דוגמה פשוטה)
  grep -R "\/etc\/cron" -n /etc 2>/dev/null || true

  # חפש קבצים ניתנים לכתיבה בכל מערכת (מסנן top-level לשם נוחות)
  find / -writable 2>/dev/null | cut -d"/" -f2,3 | grep -v proc | sort -u
  ```
* בדקו האם יש קבצים בתיקיות cron ניתנים לכתיבה ישירות:

  ```bash
  find /etc/cron.* -type f -writable 2>/dev/null
  ```

---

## דוגמאות תרחישים (במילים, ללא PoC פירוטי)

* **תסריט 1 — סקריפט system-wide שניתן לכתיבה:** אם `/etc/cron.daily/backup.sh` רץ כ‑root בכל יום ו־`/etc/cron.daily/backup.sh` ניתנת לכתיבה על‑ידי משתמש לא‑מוסמך, שינוי שלה יכול להוביל להרצת קוד כ‑root.

* **תסריט 2 — cron מריץ תוכנית עם PATH לא בטוח:** אם ה‑cron מריץ פקודה פשוטה כמו `backup` (ולא `/usr/bin/backup`) וה‑PATH של קרון כולל ספריות שניתנות לכתיבה, אפשר להחליף את `backup` בגרסה משלנו שתתבצע כ‑root.

* **תסריט 3 — cron מריץ כל קבצים בספריה ציבורית:** לדוגמא סקריפט שמריץ `for file in /tmp/tasks/*; do sh $file; done` — אם `/tmp/tasks` ניתנת לכתיבה, אפשר לשים שם סקריפט שירוץ כ־root.

---

## אמצעי מניעה ותיקון

1. **אל תאפשר כתיבה בספריות מערכתיות** (`/etc/cron.*`) למשתמשים לא‑מהימנים.
2. **השתמש בנתיבים מוחלטים בתוך crontabs** — `/usr/bin/backup` במקום `backup`.
3. **בדוק והרחק סקריפטים ניתנים לכתיבה**: `chmod o-w` או שינוי בעלות.
4. **הגבלת PATH בקרון**: ניתן להגדיר PATH בטוח בתוך `/etc/crontab` או בתחילת הסקריפט, ולא לאפשר שימוש ב־/tmp או בספריות ציבוריות.
5. **מניעת שימוש בפקודות שמריצות כל קבצים מספריה ציבורית** — שקול בדיקות על סוגי קבצים/חתימות דיגיטליות.
6. **ניטור והרשאת auditing** על כתיבות לקבצי cron או על הרצת סקריפטים מתוך cron.

---

## טיפים להצגה ב־Docs/ראיון

* הצג דוגמאות קרובות למציאות: רוב מערכות הייצור לא יריצו cron כל דקה, לכן הצג כיצד ניתן לזהות נקודות חולשה ולהסביר את הסבירות וההשפעה.
* תמיד כלול סעיף mitigation קצר — זה מראה לא רק יכולת התקפה אלא גם הבנה של פתרונות.

---

**סיום — CRONJOBS.md**

אם תרצה, אני יכול להוסיף גם קטע `POC (lab only)` שמדגים תרחיש קרון בטוח בתוך VM (עם קבצי דמה ושימוש ב־inotify או sleep כדי להדגים ריצה), בלי להכניס הוראות שמובילות לפגיעה במערכות אמת.
